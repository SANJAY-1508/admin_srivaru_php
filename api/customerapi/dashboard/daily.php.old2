<?php

include("../../config/db_config.php");
header('Access-Control-Allow-Origin: *');
header("Access-Control-Allow-Methods: POST, GET, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");
header('Content-Type: application/json; charset=utf-8');
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

$output = array();
date_default_timezone_set('Asia/Calcutta');
$today_date = date('Y-m-d');
$data = json_decode(file_get_contents("php://input"));

$daily_data = [];  // Initialize array
$all_wtg_data = []; // Initialize array


if (isset($data->user_id)) {
    $user_id = $data->user_id;
    $filter_date_input = isset($data->filter_date) && !empty($data->filter_date) ? $data->filter_date : date('Y-m-d');
    // Validate the filter_date format and ensure it's a real date
    $date = DateTime::createFromFormat('Y-m-d', $filter_date_input);
    $filter_date = DateTime::createFromFormat('d-m-Y', $filter_date_input) ? date('Y-m-d', strtotime($filter_date_input)) : $filter_date_input;

  // Check if the filter_date is in 'd-m-Y' format and convert it to 'Y-m-d'
  if (DateTime::createFromFormat('d-m-Y', $filter_date_input)) {
    $filter_date = date('Y-m-d', strtotime($filter_date_input));
} else {
    $filter_date = $filter_date_input;
}

if (!$filter_date) {
    $output["status"] = 400;
    $output["msg"] = "Invalid filter date.";
    echo json_encode($output, JSON_NUMERIC_CHECK);
    exit;
}

// Format the date as 'M-Y' (e.g., Nov-2024)
$formatted_month_year = date('M-Y', strtotime($filter_date));

    // Check user in customer_group or customer table
    $group_condition = null;
    $sql_check_group = "SELECT * FROM customer_group WHERE BINARY customergroup_uniq_id = ? AND delete_at = '0'";
    $stmt_check_group = $conn->prepare($sql_check_group);
    $stmt_check_group->bind_param("s", $user_id);
    $stmt_check_group->execute();
    $result_check_group = $stmt_check_group->get_result();

    if ($result_check_group->num_rows > 0) {
        $group_condition = "BINARY cg.customergroup_uniq_id = ?";
    } else {
        $sql_check_customer = "SELECT * FROM customer WHERE BINARY customer_unique_id = ? AND delete_at = '0'";
        $stmt_check_customer = $conn->prepare($sql_check_customer);
        $stmt_check_customer->bind_param("s", $user_id);
        $stmt_check_customer->execute();
        $result_check_customer = $stmt_check_customer->get_result();

        if ($result_check_customer->num_rows > 0) {
            $group_condition = "BINARY c.customer_unique_id = ?";
        } else {
            $output["status"] = 400;
            $output["msg"] = "No Data";
            echo json_encode($output, JSON_NUMERIC_CHECK);
            exit;
        }
    }

    $sql_daily = "
    SELECT c.*, cg.*, t.wtg_no, t.loc_no, dg.total_production, dg.dg_date,
           dg.gridfault_overtotal, dg.griddrop_overtotal, dg.error_overtotal
    FROM customer c
    INNER JOIN customer_group cg ON c.customergroupname_id COLLATE utf8mb4_general_ci = cg.customergroup_uniq_id COLLATE utf8mb4_general_ci
    LEFT JOIN turbine t ON t.customer_id COLLATE utf8mb4_general_ci = c.customer_unique_id COLLATE utf8mb4_general_ci
    LEFT JOIN daily_generation dg ON t.turbine_id COLLATE utf8mb4_general_ci = dg.turbine_id COLLATE utf8mb4_general_ci
    WHERE $group_condition 
      AND c.delete_at = '0' 
      AND t.delete_at = '0'
      AND dg.dg_date = (
          SELECT MAX(dg2.dg_date)
          FROM daily_generation dg2
          WHERE dg2.turbine_id COLLATE utf8mb4_general_ci = t.turbine_id COLLATE utf8mb4_general_ci
            AND dg2.dg_date <= ? 
      )
    ORDER BY t.wtg_no, dg.dg_date ASC;
";

$stmt_daily = $conn->prepare($sql_daily);
$stmt_daily->bind_param("ss", $user_id, $filter_date); // Ensure consistent date format
$stmt_daily->execute();
$result_daily = $stmt_daily->get_result();

$most_recent_date = null;
$total_hours_decimal = 24.00;
$total_production_sum = 0;
$total_production_dailysum = 0;
$daily_data = [];

$filter_date_found = false;  // Track if we found a record for the filter date
$processed_turbines = [];    // Keep track of processed turbines to avoid double counting


if ($result_daily->num_rows > 0) {
    while ($row = $result_daily->fetch_assoc()) {
        $dg_date = isset($row['dg_date']) ? date('Y-m-d', strtotime($row['dg_date'])) : null;
        $total_production = floatval($row['total_production'] ?? 0);
        $turbine_id = $row['wtg_no'];

        // Skip already processed turbines to avoid double counting
        if (in_array($turbine_id, $processed_turbines)) {
            continue;
        }
        $processed_turbines[] = $turbine_id;

        if ($dg_date === $filter_date) {
            $filter_date_found = true;
        }

        if ($most_recent_date === null || $dg_date > $most_recent_date) {
            $most_recent_date = $dg_date;
        }

        // Faults/drops/errors handling
        $gridfault_overtotal_decimal = !empty($row['gridfault_overtotal']) ? floatval($row['gridfault_overtotal']) : 0;
        $griddrop_overtotal_decimal = !empty($row['griddrop_overtotal']) ? floatval($row['griddrop_overtotal']) : 0;
        $error_overtotal_decimal = !empty($row['error_overtotal']) ? floatval($row['error_overtotal']) : 0;

        // Only calculate availability if total_production > 0
        if ($total_production > 0) {
            $machine_availability = number_format((($total_hours_decimal - ($gridfault_overtotal_decimal + $griddrop_overtotal_decimal + $error_overtotal_decimal)) / $total_hours_decimal) * 100, 2);
            $grid_availability = number_format((($total_hours_decimal - ($gridfault_overtotal_decimal + $griddrop_overtotal_decimal)) / $total_hours_decimal) * 100, 2);
        } else {
            $machine_availability = null;
            $grid_availability = null;
        }

        // Accumulate total production sum if it's the filter date or most recent date
        if ($dg_date === $filter_date && $total_production > 0) {
            $total_production_dailysum += $total_production;
        } elseif (!$filter_date_found && $dg_date === $most_recent_date && $total_production > 0) {
            $total_production_dailysum += $total_production;
        }

        // Attach calculated values to the row
        $row['total_production'] = $total_production;
        $row['machine_availability'] = $machine_availability;
        $row['grid_availability'] = $grid_availability;

        $daily_data[] = $row;
    }
}

// If no data for the filter date, show most recent total production
if (!$filter_date_found) {
    foreach ($daily_data as &$data) {
        if ($data['dg_date'] === $most_recent_date && $data['total_production'] > 0) {
            $data['total_production'] = floatval($data['total_production']);
        } else {
            $data['total_production'] = 0;
        }
    }
}
$month_year = date('Y-m', strtotime($filter_date));
// Step 1: Check if data exists for the provided filter_date month
$conn->set_charset("utf8mb4");

$sql_check_month = "
SELECT 1 
FROM daily_generation dg
LEFT JOIN turbine t ON dg.turbine_id = t.turbine_id
LEFT JOIN customer c ON t.customer_id = c.customer_unique_id COLLATE utf8mb4_general_ci
WHERE c.customer_unique_id COLLATE utf8mb4_general_ci = ?
  AND c.delete_at = '0'
  AND t.delete_at = '0'
  AND DATE_FORMAT(dg.dg_date, '%Y-%m') = ?
LIMIT 1
";

$stmt_check_month = $conn->prepare($sql_check_month);
$stmt_check_month->bind_param("ss", $user_id, $month_year);
$stmt_check_month->execute();
$stmt_check_month->store_result();

// Step 2: If no data for the provided month, find the most recent month with data
if ($stmt_check_month->num_rows == 0) {
    // No data for the provided month, get the most recent month with data
    $sql_recent_month = "
    SELECT DATE_FORMAT(dg.dg_date, '%Y-%m') AS recent_month
    FROM daily_generation dg
    LEFT JOIN turbine t ON dg.turbine_id = t.turbine_id
    LEFT JOIN customer c ON t.customer_id = c.customer_unique_id COLLATE utf8mb4_general_ci
    WHERE c.customer_unique_id COLLATE utf8mb4_general_ci = ?
      AND c.delete_at = '0'
      AND t.delete_at = '0'
    ORDER BY dg.dg_date DESC
    LIMIT 1
    ";

    $stmt_recent_month = $conn->prepare($sql_recent_month);
    $stmt_recent_month->bind_param("s", $user_id);
    $stmt_recent_month->execute();
    $result_recent_month = $stmt_recent_month->get_result();
    $row_recent_month = $result_recent_month->fetch_assoc();
    $stmt_recent_month->close();

    if (!empty($row_recent_month['recent_month'])) {
        $month_year = $row_recent_month['recent_month'];  // Update to the most recent month with data
    } else {
        // No data at all, handle this case (return or show a message)
        echo "No data available for the provided month or any recent month.";
        exit;
    }
}

$stmt_check_month->close();

// Step 3: Generate a list of months from the minimum available month to the selected month
$sql_min_date = "
SELECT MIN(DATE_FORMAT(dg.dg_date, '%Y-%m')) AS min_month
FROM daily_generation dg
LEFT JOIN turbine t ON dg.turbine_id = t.turbine_id
LEFT JOIN customer c ON t.customer_id = c.customer_unique_id COLLATE utf8mb4_general_ci
WHERE c.customer_unique_id COLLATE utf8mb4_general_ci = ?
  AND c.delete_at = '0'
  AND t.delete_at = '0'
";
$stmt_min_date = $conn->prepare($sql_min_date);
$stmt_min_date->bind_param("s", $user_id);
$stmt_min_date->execute();
$result_min_date = $stmt_min_date->get_result();
$row_min_date = $result_min_date->fetch_assoc();
$stmt_min_date->close();

$min_month = $row_min_date['min_month'] ?? $month_year;

$date_period = new DatePeriod(
    new DateTime($min_month . '-01'),
    new DateInterval('P1M'),
    new DateTime($month_year . '-01')
);

$months = array_map(
    fn($date) => $date->format('Y-m'),
    iterator_to_array($date_period)
);
$months[] = $month_year;  // Ensure the target month (either filter_date or recent month) is included

// Step 4: Adjust SQL query to dynamically check the months in the range
$placeholders = implode(',', array_fill(0, count($months), '?'));

// Set charset to utf8mb4 (no collation here)
$conn->set_charset("utf8mb4");

$sql_all_wtg_no = "
SELECT c.*, cg.*, t.wtg_no, t.loc_no,
    COALESCE(SUM(CASE WHEN DATE_FORMAT(dg.dg_date, '%Y-%m') = ? THEN dg.total_production ELSE 0 END), 0) AS total_production,
    DATE_FORMAT(dg.dg_date, '%Y-%m') AS month,
    COALESCE(SUM(dg.gridfault_overtotal), 0) AS gridfault_overtotal,
    COALESCE(SUM(dg.griddrop_overtotal), 0) AS griddrop_overtotal,
    COALESCE(SUM(dg.error_overtotal), 0) AS error_overtotal
FROM customer c 
INNER JOIN customer_group cg 
    ON c.customergroupname_id COLLATE utf8mb4_general_ci = cg.customergroup_uniq_id COLLATE utf8mb4_general_ci
LEFT JOIN turbine t 
    ON t.customer_id COLLATE utf8mb4_general_ci = c.customer_unique_id COLLATE utf8mb4_general_ci
LEFT JOIN daily_generation dg 
    ON t.turbine_id = dg.turbine_id
    AND DATE_FORMAT(dg.dg_date, '%Y-%m') IN ($placeholders)
WHERE c.customer_unique_id COLLATE utf8mb4_general_ci = ? 
  AND c.delete_at = '0' 
  AND t.delete_at = '0'
GROUP BY t.wtg_no
ORDER BY month ASC
";

// Prepare and execute the query
$stmt_all_wtg_no = $conn->prepare($sql_all_wtg_no);
$params = array_merge([$month_year], $months, [$user_id]);
$stmt_all_wtg_no->bind_param(str_repeat('s', count($params)), ...$params);
$stmt_all_wtg_no->execute();
$result_all_wtg_no = $stmt_all_wtg_no->get_result();

// Initialize the array to hold the turbine data and the total production sum
$all_wtg_data = [];
$total_production_monthlysum = 0;

if ($result_all_wtg_no->num_rows > 0) {
    while ($row = $result_all_wtg_no->fetch_assoc()) {
        // Set total_production to 0 for months other than the target month
        if ($row['month'] != $month_year) {
            $row['total_production'] = 0;
        }

        $total_production_monthlysum += $row['total_production'];
        $all_wtg_data[] = $row;
    }
}

$stmt_all_wtg_no->close();

    $current_year = date('Y');
    if (!empty($data->filter_date)) {
        $filter_date = DateTime::createFromFormat('Y-m-d', $data->filter_date);
        if ($filter_date) {
            $current_year = $filter_date->format('Y');
        } else {
            $output["status"] = 400;
            $output["msg"] = "Invalid date format. Use dd-mm-yyyy.";
            echo json_encode($output);
            exit;
        }
    }

    $next_year = $current_year + 1;

    if ($result_check_group->num_rows > 0) {
        $sql = "SELECT c.*, cg.*, t.wtg_no, t.loc_no, SUM(dg.total_production) AS total_production
                FROM customer c 
                INNER JOIN customer_group cg ON BINARY c.customergroupname_id = BINARY cg.customergroup_uniq_id 
                LEFT JOIN turbine t ON t.customer_id = c.customer_unique_id
                LEFT JOIN daily_generation dg ON dg.turbine_id = t.turbine_id AND YEAR(dg.dg_date) = ?
                WHERE BINARY cg.customergroup_uniq_id = ? AND c.delete_at = '0'
                GROUP BY t.wtg_no";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("is", $current_year, $user_id);
    } else {
        // Check if the user_id exists in the customer table
        $sql_check_customer = "SELECT * FROM customer WHERE BINARY customer_unique_id = ? AND delete_at = '0'";
        $stmt_check_customer = $conn->prepare($sql_check_customer);
        $stmt_check_customer->bind_param("s", $user_id);
        $stmt_check_customer->execute();
        $result_check_customer = $stmt_check_customer->get_result();

        if ($result_check_customer->num_rows > 0) {
            // Fetch customer data directly if user_id is in the customer table
            $sql = "SELECT c.customer_name, t.wtg_no, t.loc_no, SUM(dg.total_production) AS total_production
                    FROM customer c
                    LEFT JOIN turbine t ON t.customer_id = c.customer_unique_id
                    LEFT JOIN daily_generation dg ON dg.turbine_id = t.turbine_id AND YEAR(dg.dg_date) = ?
                    WHERE BINARY c.customer_unique_id = ? AND c.delete_at = '0'
                    GROUP BY t.wtg_no";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("is", $current_year, $user_id);
        } else {
            $output["status"] = 400;
            $output["msg"] = "No Data";
            $output["data"] = [];
            echo json_encode($output, JSON_NUMERIC_CHECK);
            exit;
        }
    }

    $stmt->execute();
    $sqlresult = $stmt->get_result();

    // Main processing of results
    $customer_data = array();
    $total_production_sum = 0; // Initialize the total production sum

    while ($row = $sqlresult->fetch_assoc()) {
        $customer_name = $row['customer_name'];

        // Accumulate the total production sum
        if (isset($row['total_production'])) {
            $total_production_sum += $row['total_production'];
        }

        // Group by customer
        if (isset($data->group_by_customer) && $data->group_by_customer) {
            if (!isset($customer_data[$customer_name])) {
                $customer_data[$customer_name] = $row;
                $customer_data[$customer_name]['wtg_no'] = array();
            }
            if (isset($row['wtg_no'])) {
                $customer_data[$customer_name]['wtg_no'][] = $row['wtg_no'];
            }
        } else {
            $output["data"][] = $row;
        }
    }

    if (isset($data->group_by_customer) && $data->group_by_customer) {
        $output["data"] = array_values($customer_data);
    }

    // Add the total production sum to the output
    // Ensure $daily_data is defined if used
    if (isset($daily_data)) {
        $output["daily_data"] = $daily_data;
    } else {
        $output["daily_data"] = []; // Default value if daily_data is not defined
    }


    // Prepare output data
    $output = [
        "filter_date"=> $filter_date,
        "month"=>$formatted_month_year,
        "daily_production"=>$total_production_dailysum,
        "monthly_production"=>$total_production_monthlysum,
        "yearly_production" => $total_production_sum,
        "current_year" => $current_year . '-' . $next_year,
        "status" => 200,
        "msg" => "success",
        "today_date" => date('Y-m-d'), // Define today_date
        "daily_data" => $daily_data,
        "monthly" => $all_wtg_data, // Result data
    ];
} else {
    $output["status"] = 400;
    $output["msg"] = "User ID is required.";
}
echo json_encode($output, JSON_NUMERIC_CHECK);